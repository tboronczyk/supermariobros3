; Super Mario Bros. 3 Full Disassembly by Southbird 2012
; For more info, see http://www.sonicepoch.com/sm3mix/
;
; PLEASE INCLUDE A CREDIT TO THE SOUTHBIRD DISASSEMBLY
; AND THE ABOVE LINK SOMEWHERE IN YOUR WORKS :)
;
; Original disassembler source generated by DCC6502 version v1.4
; (With labels, comments, and some syntax corrections for nesasm by Southbird)
; For more info about DCC6502, e-mail veilleux@ameth.org
;
; This source file last updated: 2012-03-12 22:48:10.385348943 -0500
; Distribution package date: Fri Apr  6 23:46:16 UTC 2012
;---------------------------------------------------------------------------
CineKing_DoWandReturn:
	LDA CineKing_Timer2
	BEQ PRG027_A008	 ; If CineKing_Timer2 = 0, jump to PRG027_A008

	DEC CineKing_Timer2	 ; CineKing_Timer2--

PRG027_A008:
	LDA CineKing_TimerT
	BEQ PRG027_A010	 ; If CineKing_TimerT = 0, jump to PRG027_A010

	DEC CineKing_TimerT	 ; CineKing_TimerT--

PRG027_A010:
	LDA CineKing_Timer3
	BEQ PRG027_A01E	 ; If CineKing_Timer3 = 0, jump to PRG027_A01E

	LDA <Counter_1
	AND #$03
	BNE PRG027_A01E	 ; 1:4 ticks proceed, otherwise jump to PRG027_A01E

	DEC CineKing_Timer3	 ; CineKing_Timer3--

PRG027_A01E:
	JSR Sprite_RAM_Clear
	JSR TAndK_DoState		; Perform state operation for Toad & King Cinematic
	JSR WandAndToad_DrawAndUpdate	; Draw and Update Wand and Toad
	JMP TAndK_PlayerFallLandDraw	; Have Player fall and land, and draw him

TAndK_DoState:
	LDA CineKing_State
	JSR DynJump
	
	; THESE MUST FOLLOW DynJump FOR THE DYNAMIC JUMP TO WORK!!
	.word TAndK_Init		; 0: Initialize vars
	.word TAndK_DrawDiagBox2	; 1: Draw the dialog box, initialize proper text by Player suit
	.word TAndK_DoKingText		; 2: Render the text
	.word TAndK_FadeOutAndGetItem	; 3: Fade out the King's room, prepare fade in the letter, get included item
	.word TAndK_WaitForA		; 4: Waits for Player to push A; meanwhile, animates Princess and flashes item

TAndK_Init:
	; Initialize VRAM address for Toad and King Cinematic Dialog Box
	LDA #$28
	STA ToadTalk_VH
	LDA #$86
	STA ToadTalk_VL

	; CineKing_Timer2 = $80
	LDA #$80
	STA CineKing_Timer2

	; Initialize character counter
	LDA #$00
	STA ToadTalk_CPos

	; Set Player to top of screen
	STA <Player_Y

	; Clear auto scroll variables
	LDY #$14	 ; Y = $14
PRG027_A052:
	STA AScroll_Anchor-1,Y	 ; Clear this auto scroll variable
	DEY		 ; Y--
	BNE PRG027_A052	 ; While Y <> 0, loop!

	; Set Player as above the screen
	LDA #$ff
	STA <Player_YHi

	; Player_X = 112
	LDA #112
	STA <Player_X

	; Set Player facing Toad and King
	LDA #SPR_HFLIP
	STA <Player_FlipBits

	; CineKing_WandYVel = 0
	STA CineKing_WandYVel

	LDY Player_Current	 ; Y = current Player index

	; Set Player's current power up to the world map value 
	; (kind of pointless in this transition, but oh well)
	LDA World_Map_Power,Y
	STA <Player_Suit

	; CineKing_WandX = $72
	LDA #$72
	STA CineKing_WandX

	; CineKing_Timer2 = $1E
	LDA #$1e
	STA CineKing_Timer2

	INC CineKing_State	 ; CineKing_State = 1

	RTS		 ; Return

Letter_Palette:
	.byte $0F, $0F, $30, $3C, $0F, $10, $35, $30, $0F, $00, $10, $30, $0F, $1B, $2C, $3C
	.byte $0F, $30, $16, $0F, $0F, $16, $25, $30, $0F, $30, $21, $0F, $0F, $30, $27, $0F


TAndK_FadeOutAndGetItem:
	LDA CineKing_Timer2
	BEQ PRG027_A0A8	 ; If CineKing_Timer2 is expired, jump to PRG027_A0A8

	LSR A
	BNE PRG027_A0CD	 ; Every other tick, jump to PRG027_A0CD (RTS)

	JMP Palette_PrepareFadeOutTK	 ; Otherwise, jump to Palette_PrepareFadeOutTK

PRG027_A0A8:
	JSR Palette_DoFadeOutTK	 ; Fade out (the King's room)

	LDA Fade_Level
	BNE PRG027_A0CD	 ; If not completely faded, jump to PRG027_A0CD

	; Load up the letter's palette
	LDY #31		; Y = 31 (all colors)
PRG027_A0B2:
	LDA Letter_Palette,Y
	STA Pal_Data,Y
	DEY		 ; Y--
	BPL PRG027_A0B2	 ; While Y >= 0, loop

	JSR Palette_PrepareFadeInTK	 ; Fade in (the letter)

	; Set scroll up high (the letter is actually level data)
	LDA #$18
	STA <Vert_Scroll

	; Level_VertScrollH = 1
	LDA #$01
	STA Level_VertScrollH

	JSR Letter_GiveIncludedItem	 ; Give item included with letter (if any)

	INC CineKing_State	 ; CineKing_State = 4 

PRG027_A0CD:
	RTS		 ; Return

	; Same as Inventory_Items IDs
	; 0 = None
	; 7 = Judgem's cloud
	; 8 = P-Wing
	; D = Music Box
LetterItem_ByWorld:
	.byte $08, $07, $0D, $08, $07, $08, $00

	; Letter's included item patterns and attributes for sprite left and right.
	; Of note, all item types are defined (although mushroom and frog suit will
	; errorenously appear in a blue palette; didn't check if a good one exists.)
Letter_ItemPat_L:	.byte $45, $47, $5D, $41, $43, $4B, $75, $51, $69, $55, $59, $61, $49
Letter_ItemPat_R:	.byte $45, $47, $5F, $41, $43, $4B, $77, $53, $69, $57, $5B, $63, $4D
Letter_ItemAttr_L:	.byte $02, $03, $03, $02, $03, $03, $00, $03, $00, $03, $03, $03, $03
Letter_ItemAttr_R:	.byte $42, $43, $03, $42, $43, $43, $00, $03, $40, $03, $03, $03, $03

	; Eyes/Mouth sprite pattern use to animate the Princess "talking"
Princess_FacePatterns:
	.byte $BF, $BD, $8B

Letter_PrincessSprites:
	.byte $78, $8B, $01, $38
	.byte $68, $EF, $01, $38
	.byte $78, $89, $01, $30
	.byte $78, $8D, $01, $40
	.byte $88, $8F, $01, $30
	.byte $88, $AD, $01, $38
	.byte $88, $AF, $01, $40
	.byte $88, $FF, $01, $C0
	.byte $88, $FF, $41, $C8
Letter_PrincessSprites_End

TAndK_WaitForA:
	; Load needed graphics
	LDA #$05
	STA PatTable_BankSel+3
	LDA #$24
	STA PatTable_BankSel+4
	LDA #$25
	STA PatTable_BankSel+5

	LDA World_Num
	CMP #$06
	BEQ PRG027_A151	 ; If World_Num = 6 (World 7), jump to PRG027_A151

	; Copy in the sprites that make up the Princess in the lower left corner of the letter
	LDY #(Letter_PrincessSprites_End - Letter_PrincessSprites)
PRG027_A148:
	LDA Letter_PrincessSprites-1,Y
	STA Sprite_RAM+$9F,Y

	DEY		 ; Y--
	BNE PRG027_A148	 ; While Y <> 0, loop

PRG027_A151:
	JSR Palette_DoFadeInTK	 ; Perform fade in

	LDA Fade_Level
	BNE PRG027_A1A7	 ; If not done fading, jump to PRG027_A1A7 (RTS)

	LDA CineKing_Timer2
	BEQ PRG027_A169	 ; If CineKing_Timer2 is expired, jump to PRG027_A169

	LSR A
	BNE PRG027_A166	 ; If CineKing_Timer2 <> 1, jump to PRG027_A166

	; CineKing_Timer2 = 1...

	; Stop any music from playing (there usually isn't though?)
	LDA #MUS1_STOPMUSIC
	STA Sound_QMusic1

PRG027_A166:
	JSR Letter_PaletteKludge	 ; Not sure what this is for; sets up the graphics buffer to patch a single palette color?

PRG027_A169:
	LDA <Pad_Input
	BPL PRG027_A174		; If Player is NOT pressing A, jump to PRG027_A174

	INC <Level_ExitToMap	; Exiting to map!

	; World_EnterState = 0
	LDA #$00
	STA World_EnterState

PRG027_A174:
	LDY #$01	 ; Y = 1

	LDA <Counter_1
	AND #$38
	BEQ PRG027_A181	 ; Periodically jump to PRG027_A181

	LSR A
	LSR A
	AND #$02
	TAY		 ; Y = 0 or 2

PRG027_A181:

	; Change face sprite pattern
	LDA Princess_FacePatterns,Y
	STA Sprite_RAM+$A1

	LDA <Counter_1
	AND #$18
	BEQ PRG027_A1A7	 ; Periodically jump to PRG027_A1A7 (RTS)

	LDY <CineKing_Var	 ; Y = CineKing_Var (item included with letter)

	; Flash included item
	LDA Letter_ItemPat_L-1,Y
	STA Sprite_RAM+$BD
	LDA Letter_ItemPat_R-1,Y
	STA Sprite_RAM+$C1
	LDA Letter_ItemAttr_L-1,Y
	STA Sprite_RAM+$BE
	LDA Letter_ItemAttr_R-1,Y
	STA Sprite_RAM+$C2

PRG027_A1A7:
	RTS		 ; Return

Letter_PalKludges:
	.byte $0F, $16

Letter_PaletteKludge:
	LDA CineKing_Timer2
	LSR A
	AND #$01
	TAY		 ; Y = 0 or 1, changing every other tick

	LDA Letter_PalKludges,Y	 ; Load palette value

	LDY Graphics_BufCnt	 ; Y = graphics buffer counter

	STA Graphics_Buffer+$3,Y ; Store into buffer

	; Color at $3F10
	LDA #$3f
	STA Graphics_Buffer,Y
	LDA #$10
	STA Graphics_Buffer+$1,Y

	; Run length of 1
	LDA #$01
	STA Graphics_Buffer+$2,Y

	; Terminator
	LSR A
	STA Graphics_Buffer+$4,Y

	; Y += 4 (bytes into buffer)
	INY
	INY
	INY
	INY

	; Update graphics buffer counter
	STY Graphics_BufCnt

	RTS		 ; Return

PRG027_A1D5:
	.byte $15, $0E, $07, $00

Letter_GiveIncludedItem:
	LDY World_Num			; Y = World_Num
	LDA LetterItem_ByWorld,Y	; Get item included with letter for this world
	STA <CineKing_Var		 ; -> CineKing_Var

	BEQ PRG027_A1FA	 ; If no item is to be given (World 7 letter only), jump to PRG027_A1FA (RTS)

	LDY Player_Current	 ; Y = current Player index
	BEQ PRG027_A1EA	 ; If Player is Mario, jump to PRG027_A1EA

	LDY #(Inventory_Items2 - Inventory_Items)	; Offset to Luigi's items

PRG027_A1EA:
	LDX #(Inventory_Cards - Inventory_Items - 1)	; X = total number of inventory items, -1

PRG027_A1EC:
	LDA Inventory_Items,Y
	BEQ PRG027_A1F5	 ; If this inventory item slot is free, jump to PRG027_A1F5

	INY		 ; Y++ (next inventory slot)
	DEX		 ; X-- (one less item to check)

	BNE PRG027_A1EC	 ; While X <> 0, loop!

PRG027_A1F5:

	; Give item included with letter
	LDA <CineKing_Var
	STA Inventory_Items,Y

PRG027_A1FA:
	RTS		 ; Return

	; Patterns that make up the rows of the dialog box
DiagBox2_R1:	.byte $94, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $90, $96
DiagBox2_R2:	.byte $92, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $93
DiagBox2_R3:	.byte $95, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $91, $97

DiagBox2_RowOffs:
	.byte (DiagBox2_R1 - DiagBox2_R1), (DiagBox2_R2 - DiagBox2_R1), (DiagBox2_R2 - DiagBox2_R1), (DiagBox2_R2 - DiagBox2_R1)
	.byte (DiagBox2_R2 - DiagBox2_R1), (DiagBox2_R2 - DiagBox2_R1), (DiagBox2_R2 - DiagBox2_R1), (DiagBox2_R3 - DiagBox2_R1)
DiagBox2_RowOffs_End

TAndK_DrawDiagBox2:
	LDA CineKing_Timer2
	BNE PRG027_A2B3	 ; If CineKing_Timer2 has not expired, jump to PRG027_A2B3 (RTS)

	LDX Graphics_BufCnt	 ; X = buffer count

	; Set current VRAM address 
	LDA ToadTalk_VH
	STA Graphics_Buffer,X
	LDA ToadTalk_VL
	STA Graphics_Buffer+1,X

	; Jump to next video row
	ADD #$20	; 32 bytes to next row
	STA ToadTalk_VL
	BCC PRG027_A264
	INC ToadTalk_VH	 ; Apply carry
PRG027_A264:
	LDA #(DiagBox2_R2 - DiagBox2_R1)	; run count per row
	STA Graphics_Buffer+2,X
	STA <Temp_Var1		 ; -> Temp_Var1

	LDY ToadTalk_CPos	 ; Y = current dialog box row
	LDA DiagBox2_RowOffs,Y
	TAY		 	; Y = offset to this row index

PRG027_A272:
	; Store next pattern in dialog box
	LDA DiagBox2_R1,Y
	STA Graphics_Buffer+3,X

	INY		 ; Y++ (next pattern for dialog box)
	INX		 ; X++ (next index in graphics buffer)

	DEC <Temp_Var1	 ; Temp_Var1--
	BNE PRG027_A272	 ; While Temp_Var1 > 0, loop!

	; Insert terminator
	LDA #$00
	STA Graphics_Buffer+3,X

	; X += 3
	INX
	INX
	INX
	STX Graphics_BufCnt

	INC ToadTalk_CPos	 ; Next row

	LDA ToadTalk_CPos
	CMP #(DiagBox_RowOffs_End - DiagBox_RowOffs)
	BLT PRG027_A2B3	 ; If row count < 8, jump to PRG027_A2B3

	; Dialog box is complete

	; Select dialog text by Player's power up suit...

	LDY <Player_Suit ; Y = current Player suit

	; Set proper offset of ToadTalk_CPos
	LDA DiagText_BySuit_L,Y
	STA ToadTalk_CPos

	; Set proper high address in CineKing_DiagHi
	LDA DiagText_BySuit_H,Y
	STA CineKing_DiagHi

	; Initialize VRAM address for Toad and King Cinematic Dialog Box Text
	LDA #$28
	STA ToadTalk_VH
	LDA #$a7
	STA ToadTalk_VL

	; CineKing_Timer2 = $10
	LDA #$10
	STA CineKing_Timer2

	INC CineKing_State	 ; CineKing_State = 2
PRG027_A2B3:
	RTS		 ; Return

KingText_Typical:
	; "Oh,thank heavens!" / "I'm back to my old" / "self again." / "Thank you so much." / "Here is a letter" / "from the Princess."

	;           H    o    ,    d    a    n    k    '         a    l         cx   i    e    l    o    !
	.byte $FE, $B7, $DE, $9A, $D3, $D0, $DD, $DA, $8C, $FE, $D0, $DB, $FE, $C0, $D8, $D4, $DB, $DE, $FE, $FE

	;           M    i         e    s    t    a    s         e    n         m    i    a
	.byte $FE, $BC, $D8, $FE, $D4, $CC, $CD, $D0, $CC, $FE, $D4, $DD, $FE, $DC, $D8, $D0, $FE, $FE, $FE, $FE

	;           p    r    o    p    r    a         f    o    r    m    o    .
	.byte $FE, $DF, $CB, $DE, $DF, $CB, $D0, $FE, $D5, $DE, $CB, $DC, $DE, $E9, $FE, $FE, $FE, $FE, $FE, $FE

	;           M    u    l    t     a    j    n         d    a    n    k    o    j    n    .
	.byte $FE, $BC, $CE, $DB, $CD, $D0, $D9, $DD, $FE, $D3, $D0, $DD, $DA, $DE, $D9, $DD, $E9, $FE, $FE, $FE

	;           J    e    n         l    e    t    e    r    o         d    e         l    a
	.byte $FE, $B9, $D4, $DD, $FE, $DB, $D4, $CD, $D4, $CB, $DE, $FE, $D3, $D4, $FE, $DB, $D0, $FE, $FE, $FE

	;           P    r    i    n    c    i    n    o    .
	.byte $FE, $BF, $CB, $D8, $DD, $D2, $D8, $DD, $DE, $E9, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

KingText_Frog:
	; "Oh me,oh my!" / "You've been" / "transformed!" / "Shall I change you" / "back with this wand?"

	;            H    o   ,          v    e    !         V    i         e    s    t    a    s
	.byte $FE, $B7, $DE, $9A, $FE, $CF, $D4, $EA, $FE, $C5, $D8, $FE, $D4, $CC, $CD, $D0, $CC, $FE, $FE, $FE

	;            t    r    a    n    s    f    o    r    m    I    t    a    !
	.byte $FE, $CD, $CB, $D0, $DD, $CC, $D5, $DE, $CB, $DC, $D8, $CD, $D0, $EA, $FE, $FE, $FE, $FE, $FE, $FE

	;           Cx    u         m    i         r    e    t    r    a    n    s    f    o    r    m    u
	.byte $FE, $C0, $CE, $FE, $DC, $D8, $FE, $CB, $D4, $CD, $CB, $D0, $DD, $CC, $D5, $DE, $CB, $DC, $CE, $FE

	;            v    i    n         p    e    r        cx    i         t    i    u
	.byte $FE, $CF, $D8, $DD, $FE, $DF, $D4, $CB, $FE, $C0, $D8, $FE, $CD, $D8, $CE, $FE, $FE, $FE, $FE, $FE

	;            b    a    s    t    o    n    o   ?
	.byte $FE, $D1, $D0, $CC, $CD, $DE, $DD, $DE, $EB, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	;
	.byte $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

KingText_Tanooki:
	; "Thank you,kind" / "raccoon." / "" / "Please tell me your" / "name."

	;            D    a    n    k    o    n    ,         b    o    n    k    o    r    a
	.byte $FE, $B3, $D0, $DD, $DA, $DE, $DD, $9A, $FE, $D1, $DE, $DD, $DA, $DE, $CB, $D0, $FE, $FE, $FE, $FE

	;            l    a    v    u    r    s    o    .
	.byte $FE, $DB, $D0, $CF, $CE, $CB, $CC, $DE, $E9, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	; 
	.byte $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	;            B    o    n    v    o    l    u         d    i    r    i        a    l         m     i
	.byte $FE, $B1, $DE, $DD, $CF, $DE, $DB, $CE, $FE, $D3, $D8, $CB, $D8, $FE, $D0, $DB, $FE, $DC, $D8, $FE

	;            v    i    a    n         n    o    m    o    n    .
	.byte $FE, $CF, $D8, $D0, $DD, $FE, $DD, $DE, $DC, $DE, $DD, $E9, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	; 
	.byte $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

KingText_Hammer:
	; "Hey,you!" / "How about lending me" / "your clothes?" / "No dice?!" / "What a drag."

	;            H    e    j    !
	.byte $FE, $B7, $D4, $D9, $EA, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	;           Cx    u         v    i         p    r    u    n    t    o    s         a    l 
	.byte $FE, $C0, $CE, $FE, $CF, $D8, $FE, $DF, $CB, $CE, $DD, $CD, $DE, $CC, $FE, $D0, $DB, $FE, $FE, $FE

	;            m    i         v    i    a    n         k    o    s    t    u    m    o    n    ?
	.byte $FE, $DC, $D8, $FE, $CF, $D8, $D0, $DD, $FE, $DA, $DE, $CC, $CD, $CE, $DC, $DE, $DD, $EB, $FE, $FE

	;            N    e    ?    !
	.byte $FE, $BD, $D4, $EB, $EA, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	;            D    o    m    a   gx    e    .
	.byte $FE, $B3, $DE, $DC, $D0, $C7, $D4, $E9, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

	;
	.byte $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE, $FE

DiagText_BySuit_L:
	.byte LOW(KingText_Typical)	; Small
	.byte LOW(KingText_Typical)	; Big
	.byte LOW(KingText_Typical)	; Fire
	.byte LOW(KingText_Typical)	; Raccoon
	.byte LOW(KingText_Frog)	; Frog
	.byte LOW(KingText_Tanooki)	; Tanooki
	.byte LOW(KingText_Hammer)	; Hammer

DiagText_BySuit_H:
	.byte HIGH(KingText_Typical)	; Small
	.byte HIGH(KingText_Typical)	; Big
	.byte HIGH(KingText_Typical)	; Fire
	.byte HIGH(KingText_Typical)	; Raccoon
	.byte HIGH(KingText_Frog)	; Frog
	.byte HIGH(KingText_Tanooki)	; Tanooki
	.byte HIGH(KingText_Hammer)	; Hammer


TAndK_DoKingText:
	LDA CineKing_Timer2
	BNE PRG027_A50E	 ; If CineKing_Timer2 has not expired, jump to PRG027_A50E (RTS)

	; Dialog address -> Temp_Var1/2
	LDA ToadTalk_CPos
	STA <Temp_Var1
	LDA CineKing_DiagHi
	STA <Temp_Var2

	INC ToadTalk_CPos	 ; ToadTalk_CPos++
	BNE PRG027_A4B9	 	; If ToadTalk_CPos did not overflow, jump to PRG027_A4B9
	INC CineKing_DiagHi	 ; Apply carry
PRG027_A4B9:

	; Get next character
	LDY #$00	 ; Y = 0
	LDA [Temp_Var1],Y

	LDY Graphics_BufCnt	 ; Y = current graphics buffer count

	; Store character into buffer
	STA Graphics_Buffer+$3,Y

	; Store VRAM high address
	LDA ToadTalk_VH
	STA Graphics_Buffer,Y

	; Run length of 1
	LDA #$01
	STA Graphics_Buffer+$2,Y

	; Terminator
	LSR A		 ; A = 0
	STA Graphics_Buffer+$4,Y

	; Update Graphics_BufCnt
	TYA
	ADD #$04
	STA Graphics_BufCnt

	; Store VRAM low address
	LDA ToadTalk_VL
	STA Graphics_Buffer+$1,Y

	INC ToadTalk_VL	 ; ToadTalk_VL++ (next column)

	AND #$1f
	CMP #$1a
	BNE PRG027_A509	 ; If we're not in column 26, jump to PRG027_A509

	; Line break!

	LDA ToadTalk_VL
	ADC #$0b		; Add enough bytes to get to next row
	STA ToadTalk_VL
	BCC PRG027_A4F5
	INC ToadTalk_VH	; Apply carry
PRG027_A4F5:

	CMP #$67	
	BNE PRG027_A509  ; If we haven't reached the last character, jump to PRG024_A25B

	LDA #$00
	STA ToadTalk_CPos	; ToadTalk_CPos = 0
	STA <CineKing_Var		; CineKing_Var = 0

	; CineKing_Timer2 = $FF
	LDA #$ff
	STA CineKing_Timer2

	INC CineKing_State	 ; CineKing_State = 3
	RTS		 ; Return

PRG027_A509:

	; CineKing_Timer2 = 4
	LDA #$04
	STA CineKing_Timer2

PRG027_A50E:
	RTS		 ; Return

KingPatternTable_ByWorld:
	.byte $1E, $1F, $1F, $1F, $1F, $1E, $1E

	; Attribute settings for the King, by world, top and bottom sprites
KingAttr_ByWorld_Top:		.byte $02, $02, $02, $02, $02, $02, $02
KingAttr_ByWorld_Bottom:	.byte $03, $02, $03, $02, $02, $03, $02

	; King's pattern index offset by world
KingPatIndexOff_ByWorld:
	.byte (W1K_Pat - King_Patterns)
	.byte (W2K_Pat - King_Patterns)
	.byte (W3K_Pat - King_Patterns)
	.byte (W4K_Pat - King_Patterns)
	.byte (W5K_Pat - King_Patterns)
	.byte (W6K_Pat - King_Patterns)
	.byte (W7K_Pat - King_Patterns)

	; Right pattern is the "talking" frame
King_Patterns:
W1K_Pat:.byte $77, $77
	.byte $81, $8D
	.byte $83, $8F
	.byte $85, $85
	.byte $87, $87
	.byte $89, $89

W2K_Pat:.byte $77, $77
	.byte $91, $9D
	.byte $93, $93
	.byte $8F, $8F
	.byte $95, $95
	.byte $97, $97

W3K_Pat:.byte $77, $77
	.byte $81, $99
	.byte $83, $8D
	.byte $85, $85
	.byte $87, $87
	.byte $89, $89

W4K_Pat:.byte $AD, $AD
	.byte $AF, $AF
	.byte $B1, $B1
	.byte $B3, $B9
	.byte $B5, $BB
	.byte $B7, $BD

W5K_Pat:.byte $9F, $9F
	.byte $A1, $A1
	.byte $A3, $A3
	.byte $A5, $A5
	.byte $A7, $AB
	.byte $A9, $A9

W6K_Pat:.byte $77, $77
	.byte $97, $A5
	.byte $99, $A7
	.byte $9D, $9D
	.byte $9F, $9F
	.byte $A1, $A1

W7K_Pat:.byte $A9, $A9
	.byte $AB, $B7
	.byte $AD, $B9
	.byte $AF, $AF
	.byte $B1, $BB
	.byte $B3, $BD


	; Left sprite starts at left, right sprite starts +4 in
Wand_SpinPats:
	.byte $59, $79, $7D, $79, $79, $7B, $7F, $7B, $59, $79, $7D, $79

	; Left sprite starts at left, right sprite starts +8 in
Wand_SpinAttrs:
	.byte $02, $02, $02, $82, $82, $82, $02, $02, $42, $42, $42, $C2, $C2, $C2, $42, $42

	; Affects speed of wand frame change
Wand_FrameChangeMask:	.byte $03, $00

	; Wand frame change delta
Wand_FrameAdd:	.byte -$01, $01

	; Base sprites for King and Toad
KingAndToad_Sprites:
	.byte $6B, $77, $02, $C0
	.byte $7A, $00, $00, $D0
	.byte $7A, $00, $00, $C8
	.byte $7A, $00, $00, $C0
	.byte $6A, $00, $00, $D0
	.byte $6A, $00, $00, $C8
	.byte $6A, $00, $00, $C0
	.byte $80, $00, $01, $B0
	.byte $80, $00, $01, $A8
	.byte $70, $00, $01, $B0
	.byte $70, $00, $01, $A8
KingAndToad_Sprites_End

	; Patterns for the cheering Toad sprites
Toad_FramePatterns:
Toad_Frame0:	.byte $C1, $C3, $C5, $C7
Toad_Frame1:	.byte $C9, $CB, $CD, $CF
Toad_Frame2:	.byte $D1, $D3, $D5, $D7
Toad_Frame3:	.byte $D9, $DB, $DD, $DF

	; Offset to start of each frame
Toad_FrameOffset:
	.byte (Toad_Frame0 - Toad_FramePatterns)
	.byte (Toad_Frame1 - Toad_FramePatterns)
	.byte (Toad_Frame0 - Toad_FramePatterns)
	.byte (Toad_Frame1 - Toad_FramePatterns)
	.byte (Toad_Frame0 - Toad_FramePatterns)
	.byte (Toad_Frame1 - Toad_FramePatterns)
	.byte (Toad_Frame0 - Toad_FramePatterns)
	.byte (Toad_Frame2 - Toad_FramePatterns)
	.byte (Toad_Frame3 - Toad_FramePatterns)
	.byte (Toad_Frame2 - Toad_FramePatterns)
	.byte (Toad_Frame3 - Toad_FramePatterns)
	.byte (Toad_Frame2 - Toad_FramePatterns)

Toad_AnimDelayByFrame:
	.byte $11, $08, $08, $08, $08, $11, $11, $14, $14, $14, $14, $14

WandAndToad_DrawAndUpdate:
	LDA <Vert_Scroll
	BMI PRG027_A5F8	 ; If Vert_Scroll >= $80 (i.e. not focusing on letter), jump to PRG027_A5F8

	RTS		 ; Return


PRG027_A5F8:

	; Copy in the base sprites for Toad and King
	LDX #(KingAndToad_Sprites_End - KingAndToad_Sprites)
PRG027_A5FA:

	LDA KingAndToad_Sprites-1,X
	STA Sprite_RAM+$4F,X

	DEX		 ; X--
	BNE PRG027_A5FA	 ; While X <> 0, loop

	; Load graphics
	LDA #$49
	STA PatTable_BankSel+3

	LDX World_Num	 ; X = World_Num

	; Load King graphics by world
	LDA KingPatternTable_ByWorld,X
	STA PatTable_BankSel+4

	; Load Toad's graphics
	LDA #$2a
	STA PatTable_BankSel+5

	; Set King's sprite attributes
	LDY #$08	 ; Y = 8
PRG027_A618:
	LDA KingAttr_ByWorld_Top,X
	STA Sprite_RAM+$62,Y
	LDA KingAttr_ByWorld_Bottom,X
	STA Sprite_RAM+$56,Y

	; Y -= 4
	DEY
	DEY
	DEY
	DEY
	BPL PRG027_A618	; While Y >= 0, loop

	LDY KingPatIndexOff_ByWorld,X	 ; Y = base offset to pattern array

	LDA CineKing_State
	CMP #$02
	BNE PRG027_A63B	 ; If CineKing_State <> 2 (rendering the text), jump to PRG027_A63B

	; While rendering the text, the King is "talking"

	LDA <Counter_1
	AND #$10
	BEQ PRG027_A63B	 ; 16 ticks on, 16 ticks off; jump to PRG027_A63B

	INY		 ; Y++ (for "talking")

PRG027_A63B:
	LDX #((W2K_Pat - W1K_Pat) * 2 - 4)	; All King sprites

PRG027_A63D:

	; Get King pattern, put in sprite
	LDA King_Patterns,Y
	STA Sprite_RAM+$55,X

	; Y += 2 (next King sprite pattern)
	INY
	INY

	; X -= 4 (next King sprite)
	DEX
	DEX
	DEX
	DEX
	BPL PRG027_A63D	 ; While X >= 0, loop

	LDY CineKing_WandState
	CPY #$02
	BLT PRG027_A659	 ; If CineKing_WandState < 2 (held), jump to  PRG027_A659

	; Wand is being held...

	; Wand pattern
	LDA #$bf
	STA Sprite_RAM+$51
	BNE PRG027_A6CD	 ; Jump (technically always) to PRG027_A6CD

PRG027_A659:
	LDA <Counter_1
	AND Wand_FrameChangeMask,Y
	BNE PRG027_A66C	 ; Periodically jump to PRG027_A66C

	LDA CineKing_WandFrame
	ADD Wand_FrameAdd,Y
	AND #$07
	STA CineKing_WandFrame

PRG027_A66C:
	JSR KingWand_ApplyVelAndFall	 ; Apply wand velocities and fall

	LDA CineKing_WandY	; For state 1 check

	LDY CineKing_WandState
	BNE PRG027_A68C	 ; If wand is not initially falling, jump to PRG027_A68C

	; Wand initial fall...

	CMP #144
	BLT PRG027_A69D	 ; If wand Y < 144, jump to PRG027_A69D

	; Wand hit the floor...

	; Play the starry entrance sound
	LDA #SND_MAPENTERWORLD
	STA Sound_QMap

	; Bounce wand towards King
	LDA #$10
	STA CineKing_WandXVel
	LDA #-$50
	STA CineKing_WandYVel

	BNE PRG027_A69A	 ; Jump (technically always) to PRG027_A69A

PRG027_A68C:

	; Wand is not on the initial fall...

	CMP #104
	BLT PRG027_A69D	 ; If wand Y < 104, jump to PRG027_A69D

	LDA CineKing_WandYVel
	BMI PRG027_A69D	 ; If wand is not falling (into King's hand), jump to PRG027_A69D

	; Play World Completed music
	LDA #MUS1_WORLDVICTORY
	STA Sound_QMusic1

PRG027_A69A:
	INC CineKing_WandState	 ; CineKing_WandState = 2

PRG027_A69D:

	; Set two wand sprites Y
	LDA CineKing_WandY
	STA Sprite_RAM+$40
	STA Sprite_RAM+$44

	LDY CineKing_WandFrame	 ; Y = CineKing_WandFrame

	; Set pattern and attributes of left and right wand sprites
	LDA Wand_SpinPats,Y
	STA Sprite_RAM+$41
	LDA Wand_SpinPats+4,Y
	STA Sprite_RAM+$45
	LDA Wand_SpinAttrs,Y
	STA Sprite_RAM+$42
	LDA Wand_SpinAttrs+8,Y
	STA Sprite_RAM+$46

	; Left wand sprite X
	LDA CineKing_WandX
	STA Sprite_RAM+$43

	; Right wand sprite X
	ADD #$08
	STA Sprite_RAM+$47

PRG027_A6CD:
	LDY CineKing_ToadFrame	 ; Y = CineKing_ToadFrame

	LDA CineKing_TimerT
	BNE PRG027_A6E3	 ; If Toad's animation timer is not expired, jump to PRG027_A6E3

	DEY		 ; Y--
	BPL PRG027_A6DA	 ; If Y >= 0, jump to PRG027_A6DA

	LDY #$0b	 ; Otherwise, loop Y around to $0B

PRG027_A6DA:
	STY CineKing_ToadFrame	 ; Update CineKing_ToadFrame

	; Reload CineKing_TimerT with proper delay value by frame
	LDA Toad_AnimDelayByFrame,Y
	STA CineKing_TimerT

PRG027_A6E3:
	LDX Toad_FrameOffset,Y	 ; X = base offset into Toad_FramePatterns for this CineKing_ToadFrame

	LDY #$0c	 ; Y = $C
PRG027_A6E8:

	; Copy in pattern for this sprite of Toad
	LDA Toad_FramePatterns,X
	STA Sprite_RAM+$6D,Y

	INX		 ; X++ (next pattern)

	; Y -= 4 (previous Toad sprite)
	DEY
	DEY
	DEY
	DEY
	BPL PRG027_A6E8	 ; While Y >= 0, loop!

	RTS		 ; Return


KingWand_ApplyVelAndFall:
	LDX #$01	; X = 1 (apply Y velocity)
	JSR KingWand_ApplyVel	 ; Apply Y velocity

	LDA CineKing_WandYVel
	BMI PRG027_A704	 ; If wand is moving upward, jump to PRG027_A704

	CMP #$40
	BGE PRG027_A70A	 ; If wand is falling >= $40, jump to PRG027_A70A

PRG027_A704:

	; CineKing_WandYVel += 2 (gravity)
	INC CineKing_WandYVel
	INC CineKing_WandYVel

PRG027_A70A:
	DEX		 ; X = 0 (apply X velocity)


KingWand_ApplyVel:
	LDA CineKing_WandXVel,X	; Get Velocity
	ASL A		 
	ASL A		 
	ASL A		 
	ASL A		 	; Fractional part shifted up
	ADD CineKing_WandXVel_Frac,X	 
	STA CineKing_WandXVel_Frac,X	; Add to object's vel fractional accumulator

	PHP		 ; Save CPU state

	LDA CineKing_WandXVel,X	; Get Velocity
	LSR A
	LSR A
	LSR A
	LSR A		 ; Whole part shifted down (integer)
	CMP #%00001000	 ; Check the sign bit
	BLT PRG027_A727	 ; If the value was not negatively signed, jump to PRG027_A727
	ORA #%11110000	 ; Otherwise, apply a sign extension

PRG027_A727:
	PLP		 ; Restore CPU state

	; Add to wand X/Y
	ADC CineKing_WandX,X
	STA CineKing_WandX,X

	RTS		 ; Return

PlayerFall_Frame:
	.byte PF_JUMPFALLSMALL	; Small
	.byte PF_FALLBIG	; Big
	.byte PF_FALLBIG	; Fire
	.byte PF_TAILWAGFALL+2	; Leaf
	.byte PF_FROGHOP_BASE+2	; Frog
	.byte PF_TAILWAGFALL+2	; Tanooki
	.byte PF_FALLBIG	; Hammer

PlayerStand_Frame:
	.byte PF_WALKSMALL_BASE		; Small
	.byte PF_WALKBIG_BASE+2		; Big
	.byte PF_WALKBIG_BASE+2		; Fire
	.byte PF_WALKSPECIAL_BASE+2	; Leaf
	.byte PF_FROGHOP_BASE		; Frog
	.byte PF_WALKSPECIAL_BASE+2	; Tanooki
	.byte PF_WALKBIG_BASE+2		; Hammer

TAndK_PlayerFallLandDraw:
	LDY <Player_Suit	; Y = Player's suit

	LDA <Player_Y
	CMP #128
	BLT PRG027_A749	 ; If Player Y < 128, jump to PRG027_A749

	; Player Y > 128...

	LDX <Player_YHi	
	BEQ PRG027_A75B	 ; If Player is vertically on-screen, jump to PRG027_A75B

PRG027_A749:

	; +4 to Player Y
	ADD #$04
	STA <Player_Y

	BCC PRG027_A752	 ; If no carry, jump to PRG027_A752
	INC <Player_YHi		 ; Apply carry
PRG027_A752:
	INC CineKing_Timer2	 ; CineKing_Timer2++

	LDA PlayerFall_Frame,Y	 ; Get appropriate Player falling frame
	JMP PRG027_A75E	 ; Jump to PRG027_A75E

PRG027_A75B:
	LDA PlayerStand_Frame,Y	 ; Get appropriate Player standing frame

PRG027_A75E:
	STA <Player_Frame	; Set appropriate Player frame

	; Load page 29 @ C000
	LDA #29
	STA PAGE_C000
	JSR PRGROM_Change_C000

	JSR Player_Draw		; Draw Player!

	; Load page 0 @ C000
	LDA #0
	STA PAGE_C000
	JSR PRGROM_Change_C000

	RTS		 ; Return


Letter_Bodies:
	.word Letter_World1	; World 1
	.word Letter_World2	; World 2
	.word Letter_World3	; World 3
	.word Letter_World4	; World 4
	.word Letter_World5	; World 5
	.word Letter_World6	; World 6
	.word Letter_World7	; World 7 

Letter_World1:
	; "If you see any" / "ghosts,be careful." / "They will give chase" / "if you turn away." / "I have enclosed a" / "jewel that helps" / "    protect you."

	;       S    e         v    i         v    i    d    a    s
	.byte $C2, $D4, $FE, $CF, $D8, $FE, $CF, $D8, $D3, $D0, $CC, $00

	;       f    a    n    t    o    m    o    j    n    ,         a    t    e    n    t    u    .
	.byte $D5, $D0, $DD, $CD, $DE, $DC, $DE, $D9, $DD, $9A, $FE, $D0, $CD, $D4, $DD, $CD, $CE, $E9, $00

	;       I    l    i        cx    a    s    o    s        v     i    n         s    e
	.byte $B8, $DB, $D8, $FE, $C0, $D0, $CC, $DE, $CC, $FE, $CF, $D8, $DD, $FE, $CC, $D4, $00

	;       v    i         d    e    t    u    r    n    o    s         v    i    n   .
	.byte $CF, $D8, $FE, $D3, $D4, $CD, $CE, $CB, $DD, $DE, $CC, $FE, $CF, $D8, $DD, $E9, $00

	;      M    i          a    l    d    o    n    i    s         j    u    v    e    l    o    n    ,
	.byte $BC, $D8, $FE, $D0, $DB, $D3, $DE, $DD, $D8, $CC, $FE, $D9, $CE, $CF, $D4, $DB, $DE, $DD, $9A, $00

	;      k     i    u         p    r    o    t    e    k    t    o    s         v    i    n    .
	.byte $DA, $D8, $CE, $FE, $DF, $CB, $DE, $CD, $D4, $DA, $CD, $DE, $CC, $FE, $CF, $D8, $DD, $E9, $FF


Letter_World2:
	; "You can stomp on" / "your enemies using" / "Goomba's shoe." / "I have enclosed a" / "jewel that helps" / "    protect you."

	;       V    i         p    o    v    a    s         t    r    e    t    i
	.byte $C5, $D8, $FE, $DF, $DE, $CF, $D0, $CC, $FE, $CD, $CB, $D4, $CD, $D8, $00

	;       m    a    l    a    m    i    k    o    j    n         p    e    r         l    a
	.byte $DC, $D0, $DB, $D0, $DC, $D8, $DA, $DE, $D9, $DD, $FE, $DF, $D4, $CB, $FE, $DB, $D0, $00

	;      Sx    u    o         d    e         K    u    r    i    b    o    .
	.byte $88, $CE, $DE, $FE, $D3, $D4, $FE, $BA, $CE, $CB, $D8, $D1, $DE, $E9, $00

	;      M    i          a    l    d    o    n    i    s         j    u    v    e    l    o    n    ,
	.byte $BC, $D8, $FE, $D0, $DB, $D3, $DE, $DD, $D8, $CC, $FE, $D9, $CE, $CF, $D4, $DB, $DE, $DD, $9A, $00

	;      k     i    u         p    r    o    t    e    k    t    o    s         v    i    n    .
	.byte $DA, $D8, $CE, $FE, $DF, $CB, $DE, $CD, $D4, $DA, $CD, $DE, $CC, $FE, $CF, $D8, $DD, $E9, $FF


Letter_World3:
	; "The white block" / "contains magic" / "powers that will" / "enable you to defeat" / "your enemies." / "I have enclosed a" / "jewel that helps" / "protect you."

	;       L    a         b    l    a    n    k    a         b    l    o    k    e   g    o
	.byte $BB, $D0, $FE, $D1, $DB, $D0, $DD, $DA, $D0, $FE, $D1, $DB, $DE, $DA, $D4, $D6, $DE, $00

	;       h    a    v    a    s         m    a    g    i    a    n         p    o    v    o    n    ,
	.byte $D7, $D0, $CF, $D0, $CC, $FE, $DC, $D0, $D6, $D8, $D0, $DD, $FE, $DF, $DE, $CF, $DE, $DD, $9A, $00

	;       k    i    u         e    b    l    i    g    o    s         a    l         v   i
	.byte $DA, $D8, $CE, $FE, $D4, $D1, $DB, $D8, $D6, $DE, $CC, $FE, $D0, $DB, $FE, $CF, $D8, $00

	;       v    e    n    k    i         l    a         m    a    l    a    m    i    k    o    j    n   .
	.byte $CF, $D4, $DD, $DA, $D8, $FE, $DB, $D0, $FE, $DC, $D0, $DB, $D0, $DC, $D8, $DA, $DE, $D9, $DD, $E9, $00

	;      M    i          a    l    d    o    n    i    s         j    u    v    e    l    o    n    ,
	.byte $BC, $D8, $FE, $D0, $DB, $D3, $DE, $DD, $D8, $CC, $FE, $D9, $CE, $CF, $D4, $DB, $DE, $DD, $9A, $00

	;      k     i    u         p    r    o    t    e    k    t    o    s         v    i    n    .
	.byte $DA, $D8, $CE, $FE, $DF, $CB, $DE, $CD, $D4, $DA, $CD, $DE, $CC, $FE, $CF, $D8, $DD, $E9, $FF


Letter_World4:
	; "The thief who stole" / "the Whistle has" / "escaped to the east" / "side of the Sand" / "Dunes." / "I have enclosed a" / "jewel that helps" / "protect you."

	;       L    a        sx    t    e    l    i    s    t    o    ,         k    i    u
	.byte $BB, $D0, $FE, $88, $CD, $D4, $DB, $D8, $CC, $CD, $DE, $9A, $FE, $DA, $D8, $CE, $00

	;      sx    t    e    l    i    s         l    a         f    a    j    f    i    l    o   n   , 
	.byte $88, $CD, $D4, $DB, $D8, $CC, $FE, $DB, $D0, $FE, $D5, $D0, $D9, $D5, $D8, $DB, $DE, $DD, $9A, $00

	;       e    s    k    a    p    i    s         a    l         l    a
	.byte $D4, $CC, $DA, $D0, $DF, $D8, $CC, $FE, $D0, $DB, $FE, $DB, $D0, $00

	;       o    r    i    e    n    t    a         p    a    r    t    o         d    e         l    a
	.byte $DE, $CB, $D8, $D4, $DD, $CD, $D0, $FE, $DF, $D0, $CB, $CD, $DE, $FE, $D3, $D4, $FE, $DB, $D0, $00

	;       d    e    z    e    r    t    o    .         M    i         a    l    d    o    n    i    s
	.byte $D3, $D4, $8F, $D4, $CB, $CD, $DE, $E9, $FE, $BC, $D8, $FE, $D0, $DB, $D3, $DE, $DD, $D8, $CC, $00

	;       j    u    v    e    l    o    n    ,         k    i    u

	.byte $D9, $CE, $CF, $D4, $DB, $DE, $DD, $9A, $FE, $DA, $D8, $CE, $00

	;       p    r    o    t    e    k    t    o    s         v    i    n    .
	.byte $DF, $CB, $DE, $CD, $D4, $DA, $CD, $DE, $CC, $FE, $CF, $D8, $DD, $E9, $FF


Letter_World5:
	; "Be careful in the" / "Ice World. The" / "creatures trapped in" / "the ice will come to" / "life if warmed." / "I have enclosed a" / "jewel that helps" / "protect you."

	;       E    s    t    u         z    o    r    g    a         e    n         l    a
	.byte $B4, $CC, $CD, $CE, $FE, $8F, $DE, $CB, $D6, $D0, $FE, $D4, $DD, $FE, $DB, $D0, $00

	;       n    e   gx    a         l    a    n    d    o    .         L    a
	.byte $DD, $D4, $C7, $D0, $FE, $DB, $D0, $DD, $D3, $DE, $D9, $FE, $BB, $D0, $00

	;       f    r    o    s    t    i    g    i    t    a    j         b    e    s    t    o    j
	.byte $D5, $CB, $DE, $CC, $CD, $D8, $D6, $D8, $CD, $D0, $D9, $FE, $D1, $D4, $CC, $CD, $DE, $D9, $00

	;       r    e    v    i    v    i    ĝ    o    s         s    e         v    i
	.byte $CB, $D4, $CF, $D8, $CF, $D8, $C7, $DE, $CC, $FE, $CC, $D4, $FE, $CF, $D8, $00

	;       v    a    r    m    i    g    o    s         i    l    i    n    .
	.byte $CF, $D0, $CB, $DC, $D8, $D6, $DE, $CC, $FE, $D8, $DB, $D8, $DD, $E9, $00

	;      M    i          a    l    d    o    n    i    s         j    u    v    e    l    o    n    ,
	.byte $BC, $D8, $FE, $D0, $DB, $D3, $DE, $DD, $D8, $CC, $FE, $D9, $CE, $CF, $D4, $DB, $DE, $DD, $9A, $00

	;      k     i    u         p    r    o    t    e    k    t    o    s         v    i    n    .
	.byte $DA, $D8, $CE, $FE, $DF, $CB, $DE, $CD, $D4, $DA, $CD, $DE, $CC, $FE, $CF, $D8, $DD, $E9, $FF


Letter_World6:
	; "I am well. Please" / "retrieve the Magic" / "Whistle hidden in" / "the darkness at the" / "end of the Third" / "world. I have" / "enclosed a jewel" / "that helps" / "protect you."

	;       M    i         f    a    r    t    a    s         b    o    n    e    .
	.byte $BC, $D8, $FE, $D5, $D0, $CB, $CD, $D0, $CC, $FE, $D1, $DE, $DD, $D4, $E9, $00

	;       B    o    n    v    o    l    u        r     e    p    r    e    n    i         l    a
	.byte $B1, $DE, $DD, $CF, $DE, $DB, $CE, $FE, $CB, $D4, $DF, $CB, $D4, $DD, $D8, $FE, $DB, $D0, $00

	;       m    a    g    i    a    n         f    a    j    f    i    l    o    n
	.byte $DC, $D0, $D6, $D8, $D0, $DD, $FE, $D5, $D0, $D9, $D5, $D8, $DB, $DE, $DD, $00

	;       k    a   sx    i    t    a    n         e    n         l    a 
	.byte $DA, $D0, $88, $D8, $CD, $D0, $DD, $FE, $D4, $DD, $FE, $DB, $D0, $00

	;       m    a    l    l    u    m    o         e    n         l    a         f    i    n    o
	.byte $DC, $D0, $DB, $DB, $CE, $DC, $DE, $FE, $D4, $DD, $FE, $DB, $D0, $FE, $D5, $D8, $DD, $DE, $00

	;       d    e         l    a        t     r    i    a         n    i    v    e    l    o    .
	.byte $D3, $D4, $FE, $DB, $D0, $FE, $CD, $CB, $D8, $D0, $FE, $DD, $D8, $CF, $D4, $DB, $DE, $E9, $00

	;      M    i          a    l    d    o    n    i    s         j    u    v    e    l    o    n    ,
	.byte $BC, $D8, $FE, $D0, $DB, $D3, $DE, $DD, $D8, $CC, $FE, $D9, $CE, $CF, $D4, $DB, $DE, $DD, $9A, $00

	;      k     i    u         p    r    o    t    e    k    t    o    s
	.byte $DA, $D8, $CE, $FE, $DF, $CB, $DE, $CD, $D4, $DA, $CD, $DE, $CC, $00

	;       v    i    n    .
	.byte $CF, $D8, $DD, $E9, $FF


Letter_World7:
	; "I kidnapped the" / "Princess while you" / "were running around." / "She's here in my" / "castle,if you dare" / "to try and rescue" / "    her."

	;       M    i         f    o    r    k    a    p    t    i    s         l    a
	.byte $BC, $D8, $FE, $D5, $DE, $CB, $DA, $D0, $DF, $CD, $D8, $CC, $FE, $DB, $D0, $00

	;       P    r    i    n    c    i    n    o    n         d    u    m         v    i
	.byte $DF, $CB, $D8, $DD, $D2, $D8, $DD, $DE, $DD, $FE, $D3, $CE, $DC, $FE, $CF, $D8, $00

	;       m    a    l   sx    p    a    r    i    s         t    e    m    p    o    n    . 
	.byte $DC, $D0, $DB, $88, $DF, $D0, $CB, $D8, $CC, $FE, $CD, $D4, $DC, $DF, $DE, $DD, $E9, $00

	;      Sx    i         e    s    t    a    s         e    n         m    i    a
	.byte $88, $D8, $FE, $D4, $CC, $CD, $D0, $CC, $FE, $D4, $DD, $FE, $DC, $D8, $D0, $00

	;       k    a    s    t    e    l    o    ,         s    e         v    i         
	.byte $DA, $D0, $CC, $CD, $D4, $DB, $DE, $9A, $FE, $CC, $D4, $FE, $CF, $D8, $00

	;       a   ux    d    a    c    o    s         p    r    o    v    i         s    a    v    i
	.byte $D0, $C6, $D3, $D0, $D2, $DE, $CC, $FE, $DF, $CB, $DE, $CF, $D8, $FE, $CC, $D0, $CF, $D8, $00

	;      sx    i    n    .
	.byte $88, $D8, $DD, $E9, $FF


LetterRow_VRAM_L:	.byte $4A, $2A, $06, $E6, $C6, $A6, $86, $66, $46
LetterRow_VRAM_H:	.byte $22, $22, $22, $21, $21, $21, $21, $21, $21

Letter_Header:
	; Greeting ("Greetings,")
	;       S    a    l    u    t    o    n    ,
	.byte $C2, $D0, $DB, $CE, $CD, $DE, $DD, $9A, $00

	; Closing (Nothing)
	.byte $00

	; Signature top row ("Princess")
	;       P    r    i    n    c    i    n    o
	.byte $BF, $CB, $D8, $DD, $D2, $D8, $DD, $DE, $00

	; Signature bottom row ("     Toadstool.")
	;                      P    e    r    s    i    k    o
	.byte $FE, $FE, $FE, $BF, $D4, $CB, $CC, $D8, $DA, $DE, $FF

Letter_HeaderBowser:
	; Greeting ("Yo!")
	;       H    e    j    !
	.byte $B7, $D4, $D9, $EA, $00

	; Closing ("Ha ha ha...")
	;       H    a         h    a         h    a    .    .    .
	.byte $B7, $D0, $FE, $D7, $D0, $FE, $D7, $D0, $E9, $E9, $E9, $00

	; Signature top row (Nothing)
	.byte $00

	; Signature bottom row ("King of the Koopa")
	;                      R    e   gx    o         K    u    p    a
	.byte $FE, $FE, $FE, $C1, $D4, $C7, $DE, $FE, $BA, $CE, $DF, $D0, $FF

	; Letter header offset by world
Letter_HeaderOffset:
	.byte (Letter_Header - Letter_Header)		; World 1
	.byte (Letter_Header - Letter_Header)		; World 2
	.byte (Letter_Header - Letter_Header)		; World 3
	.byte (Letter_Header - Letter_Header)		; World 4
	.byte (Letter_Header - Letter_Header)		; World 5
	.byte (Letter_Header - Letter_Header)		; World 6
	.byte (Letter_HeaderBowser - Letter_Header)	; World 7


	; VRAM High address for letter components
	; Signature bottom row, Signature top row, Closing, Greeting
Letter_VRAMHi:
	.byte $22, $22, $22, $21

	; VRAM Low address for letter components
	; Signature bottom row, Signature top row, Closing, Greeting
Letter_VRAMLo:
	.byte $A8, $8B, $6B, $06
Letter_VRAMLo_End

EndWorldLetter_GenerateText:
	LDX World_Num	; X = current world index

	LDY Letter_HeaderOffset,X	 ; Y = offset to "Greeting"

	LDX #(Letter_VRAMLo_End - Letter_VRAMLo - 1)
PRG027_AB6F:

	; Temp_Var1 = VRAM Low address
	LDA Letter_VRAMLo,X
	STA <Temp_Var1

PRG027_AB74:
	LDA PPU_STAT

	; Set VRAM High address
	LDA Letter_VRAMHi,X
	STA PPU_VRAM_ADDR

	; Set VRAM Low address
	LDA <Temp_Var1
	STA PPU_VRAM_ADDR

	INY		 ; Y++

	LDA Letter_Header-1,Y ; Get next character (-1 because they increment Y first)
	BEQ PRG027_AB93	  ; If character = 0 (end of letter component), jump to PRG027_AB93

	CMP #$ff
	BEQ PRG027_AB96	 ; If character = $FF (letter header terminator), jump to PRG027_AB96

	; Otherwise, push it as a pattern
	STA PPU_VRAM_DATA

	INC <Temp_Var1	 ; Temp_Var1++
	BNE PRG027_AB74	 ; If Temp_Var1 has not overflowed, jump to PRG027_AB74

PRG027_AB93:
	DEX		 ; X--
	BPL PRG027_AB6F

PRG027_AB96:

	; End of letter header...

	LDA World_Num
	ASL A
	TAX		 ; X = World_Num * 2

	; Base address for letter body -> Temp_Var1/2
	LDA Letter_Bodies,X
	STA <Temp_Var1
	LDA Letter_Bodies+1,X
	STA <Temp_Var2	

	LDY #$00	 ; Y = 0 (letter body offset)
	LDX #(LetterRow_VRAM_H - LetterRow_VRAM_L - 1)	 ; init X (letter body line index)
PRG027_ABA9:
	; Temp_Var4 = VRAM low address starting for this line
	LDA LetterRow_VRAM_L,X
	STA <Temp_Var4

PRG027_ABAE:
	LDA PPU_STAT

	; Set VRAM High address starting for this line
	LDA LetterRow_VRAM_H,X
	STA PPU_VRAM_ADDR

	; Set VRAM Low address starting for this line
	LDA <Temp_Var4
	STA PPU_VRAM_ADDR

	LDA [Temp_Var1],Y ; Get next character from letter body

	INY		 ; Y++ (next letter body character)

	CMP #$00
	BEQ PRG027_ABCE	 ; If character = 0 (next line), jump to PRG027_ABCE

	CMP #$ff
	BEQ PRG027_ABD1	 ; If character = $FF (terminator), jump to PRG027_ABD1 (RTS)

	STA PPU_VRAM_DATA	; Store character as pattern

	INC <Temp_Var4	 ; Temp_Var4++
	BNE PRG027_ABAE	 ; Loop (assumes Temp_Var4 never overflows)

PRG027_ABCE:
	DEX		 ; X-- (next line address)
	BPL PRG027_ABA9	 ; While X >= 0, loop (prevents too many lines)

PRG027_ABD1:
	RTS		 ; Return


	; Palette Data
	; The palette data is pretty much a direct write to the PPU palette RAM.
	; A palette is defined by an entire set of 16 colors, assigned by index.
	; Level_Tileset normally decides which palette to select, and then the
	; RAM variable PalSel_Tile_Colors selects which colors will be assigned
	; the bg (tiles), and after that PalSel_Obj_Colors select the index for
	; the sprites.  There is an override variable, Pal_Force_Set12, which
	; will select a palette set based on its value instead of Level_Tileset,
	; but it does not use the PalSel variables and instead forces the first
	; two palette sets into bg / sprite respectively (too bad, really!)

PalSet_Maps:	
	; Refer to Map_Tile_ColorSets and Map_Object_ColorSets in PRG012 to change these selections
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $37, $0F, $21, $2A, $37, $0F, $30, $16, $37	; World 1, 3
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $28, $0F, $12, $2A, $28, $0F, $30, $16, $28	; World 2
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $21, $0F, $21, $10, $37, $0F, $21, $10, $37	; World 9
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $3A, $0F, $12, $2A, $3A, $0F, $30, $16, $3A	; World 4
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $3B, $0F, $21, $2A, $3B, $0F, $36, $21, $30	; World 5
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $30, $0F, $22, $2A, $30, $0F, $30, $22, $30	; World 6
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $2A, $0F, $11, $1A, $2A, $0F, $30, $16, $2A	; World 7
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $17, $0F, $06, $27, $17, $0F, $35, $25, $17	; World 8

	.byte $FF, $16, $36, $0F, $FF, $17, $36, $0F, $FF, $17, $27, $0F, $FF, $30, $16, $0F	; Map object colors used in World 1-7 + 9
	.byte $FF, $16, $36, $0F, $FF, $17, $36, $0F, $FF, $17, $27, $0F, $FF, $30, $16, $0F	; Map object colors used in World 8
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; Unused?  (Same as previous anyway) 
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; Unused?  (Same as previous anyway)

PalSet_Plains:
	.byte $3C, $0F, $30, $3C, $3C, $0F, $36, $27, $3C, $0F, $2A, $1A, $3C, $0F, $31, $21	; BG Pal 0
	.byte $36, $0F, $30, $3C, $36, $0F, $36, $27, $36, $0F, $2A, $1A, $36, $0F, $31, $12	; BG Pal 1
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $2A, $1A, $37, $0F, $31, $12	; BG Pal 2
	.byte $3B, $0F, $30, $3C, $3B, $0F, $36, $27, $3B, $0F, $2A, $1A, $3B, $0F, $31, $21	; BG Pal 3
	.byte $21, $0F, $30, $3C, $21, $0F, $36, $27, $21, $0F, $2A, $1A, $21, $0F, $31, $12	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $30, $0F, $0F, $0F, $01, $31, $12	; BG Pal 5
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $2A, $1A, $37, $0F, $2C, $1C	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $0B, $2A, $1A, $0F, $02, $21, $12	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0C, $FF, $0C, $30, $16, $FF, $0C, $30, $2A, $FF, $0C, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_Fort:
	.byte $0F, $0F, $30, $3C, $0F, $07, $36, $27, $0F, $00, $30, $10, $0F, $0C, $3C, $2C	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $16, $2C, $27, $0F, $00, $10, $30, $0F, $1C, $2C, $3C	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $07, $36, $27, $0F, $00, $30, $10, $0F, $1B, $3B, $2B	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $07, $36, $27, $0F, $0B, $3B, $1B, $0F, $02, $21, $12	; BG Pal 3
	.byte $0F, $0F, $30, $3C, $0F, $07, $36, $27, $0F, $06, $27, $16, $0F, $00, $30, $10	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $26, $23, $30, $0F, $22, $21, $30, $0F, $32, $13, $30	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $07, $30, $27, $0F, $30, $0F, $0F, $0F, $30, $0F, $0F	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $0C, $30, $2A, $0F, $3C, $30, $12	; BG Pal 7

	.byte $FF, $16, $27, $0C, $FF, $06, $30, $16, $FF, $0F, $30, $2C, $FF, $07, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $07, $30, $16, $FF, $00, $30, $2C, $FF, $1A, $30, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $0F, $36, $16, $FF, $0F, $30, $27, $FF, $0F, $30, $2A	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $0F, $36, $16, $FF, $0F, $36, $10, $FF, $0F, $27, $17	; SPR Pal 3 (11)

PalSet_HillsUnder:
	.byte $3C, $0F, $30, $3C, $3C, $0F, $36, $27, $3C, $0F, $2A, $1A, $3C, $0F, $2A, $12 	; BG Pal 0
	.byte $22, $0F, $30, $3C, $22, $0F, $36, $27, $22, $0F, $27, $17, $22, $0F, $27, $2C 	; BG Pal 1
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $2A, $1A, $37, $0F, $2A, $21  	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $30, $10, $0F, $0F, $31, $12 	; BG Pal 3
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $1C, $3C, $2A, $0F, $1C, $3C, $12 	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $07, $17, $27, $0F, $07, $17, $12 	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $0F, $2A, $1A, $0F, $0F, $2A, $12 	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $3C, $30, $2A, $0F, $3C, $30, $12 	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $0C, $30, $16, $FF, $0C, $30, $2A, $FF, $0C, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $0C, $30, $16, $FF, $0C, $30, $10, $FF, $0C, $37, $27	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_HighUp:
	.byte $3C, $0F, $30, $3C, $3C, $0F, $36, $27, $3C, $0F, $2A, $1A, $3C, $0F, $30, $21	; BG Pal 0
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $2B, $1A, $37, $0F, $30, $21	; BG Pal 1
	.byte $02, $0F, $30, $3C, $02, $0F, $25, $24, $02, $0F, $3A, $24, $02, $0F, $26, $24	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $30, $0F, $0F, $0F, $30, $0F, $0F, $0F, $30, $0F, $0F	; BG Pal 3
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $2A, $1A, $37, $0F, $31, $21	; BG Pal 4
	.byte $02, $0F, $30, $3C, $02, $0F, $23, $30, $02, $0F, $21, $30, $02, $0F, $13, $30	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $30, $0F, $0F, $0F, $30, $0F, $0F, $0F, $30, $0F, $0F	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $17, $0F, $0F, $27, $17, $0F, $0F, $25, $17	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_Plant:
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $2A, $1B, $37, $0F, $30, $12	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $2A, $1B, $0F, $0F, $30, $12	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $0A, $2A, $1B, $0F, $0C, $31, $12	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $38, $0F, $0F, $2A, $38, $0F, $0F, $26, $38	; BG Pal 3
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $30, $0F, $0F, $2A, $30, $0F, $0F, $12, $30	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $0F, $23, $30, $0F, $0F, $21, $30, $0F, $0F, $13, $30	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $38, $0F, $0F, $2A, $38, $0F, $0F, $26, $38	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $17, $0F, $0F, $27, $17, $0F, $0F, $25, $17	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_Water:
	.byte $12, $0F, $30, $3C, $12, $0F, $36, $27, $12, $0F, $01, $2C, $12, $0F, $25, $10	; BG Pal 0
	.byte $12, $0F, $30, $3C, $12, $0F, $36, $27, $12, $0F, $01, $2C, $12, $0F, $30, $10	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $36, $0F, $0F, $21, $36, $0F, $0F, $30, $36	; BG Pal 2
	.byte $22, $0F, $30, $3C, $22, $0F, $36, $27, $22, $0F, $30, $37, $22, $0F, $25, $10	; BG Pal 3
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 4
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 5
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 6
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $30, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $2A, $27, $0F, $FF, $17, $27, $0F, $FF, $16, $30, $0F	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $17, $27, $36, $FF, $2A, $30, $0F, $FF, $0F, $30, $16	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $30, $16, $0F, $FF, $2A, $3B, $0F, $FF, $17, $36, $26	; SPR Pal 3 (11)

PalSet_Toad:
	.byte $0F, $0F, $30, $3C, $0F, $3C, $30, $3B, $0F, $27, $30, $17, $0F, $12, $31, $21	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $3C, $30, $3B, $0F, $27, $30, $17, $0F, $12, $31, $21	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $17, $27, $36, $0F, $2A, $21, $36, $0F, $16, $30, $36	; BG Pal 2
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 3
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 4
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 5
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 6
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $27, $2A, $0F, $FF, $0F, $36, $16, $FF, $30, $16, $0F	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $2A, $27, $0F, $FF, $17, $27, $0F, $FF, $16, $30, $0F	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $17, $27, $36, $FF, $2A, $30, $0F, $FF, $0F, $30, $16	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $30, $16, $0F, $FF, $2A, $3B, $0F, $FF, $17, $36, $26	; SPR Pal 3 (11)

PalSet_PipeMaze:
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $0B, $3B, $1B, $0F, $0F, $0C, $0F	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $3C, $30, $3B, $0F, $27, $30, $17, $0F, $12, $31, $21	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $17, $27, $36, $0F, $2A, $21, $36, $0F, $16, $30, $36	; BG Pal 2
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12 	; BG Pal 3
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 4
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 5
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 6
	.byte $36, $0F, $30, $3C, $36, $0F, $27, $17, $36, $0F, $2B, $1A, $36, $0F, $3C, $12	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0C, $30, $16, $FF, $0C, $30, $2A, $FF, $0C, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $2A, $27, $0F, $FF, $17, $27, $0F, $FF, $16, $30, $0F	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $17, $27, $36, $FF, $2A, $30, $0F, $FF, $0F, $30, $16	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $30, $16, $0F, $FF, $2A, $3B, $0F, $FF, $17, $36, $26	; SPR Pal 3 (11)

PalSet_Desert:
	.byte $22, $0F, $30, $3C, $22, $0F, $36, $27, $22, $0F, $27, $17, $22, $0F, $36, $14	; BG Pal 0
	.byte $36, $0F, $30, $3C, $36, $0F, $36, $27, $36, $0F, $2A, $1A, $36, $0F, $31, $21	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $0F, $30, $00, $0F, $0F, $1A, $0A, $0F, $0F, $31, $21	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $27, $17, $0F, $0F, $31, $21	; BG Pal 3
	.byte $36, $0F, $30, $3C, $36, $0F, $36, $27, $36, $0F, $27, $17, $36, $0F, $31, $21	; BG Pal 4
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $27, $17, $37, $0F, $31, $21	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $30, $0F, $0F, $0F, $30, $0F, $0F	; BG Pal 6
	.byte $22, $0F, $30, $3C, $22, $0F, $36, $27, $22, $0F, $2A, $1A, $22, $0F, $31, $12	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $36, $14, $FF, $0F, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $17, $27, $FF, $0F, $36, $27	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $0C, $30, $16, $FF, $0C, $30, $2C, $FF, $0C, $30, $00	; SPR Pal 3 (11)

PalSet_Airship:
	.byte $3C, $0F, $30, $3C, $3C, $0F, $36, $27, $3C, $0F, $30, $10, $3C, $0F, $27, $17 	; BG Pal 0
	.byte $12, $0F, $30, $3C, $12, $0F, $36, $27, $12, $0F, $30, $10, $12, $0F, $2B, $1B	; BG Pal 1
	.byte $37, $0F, $30, $3C, $37, $0F, $36, $27, $37, $0F, $30, $10, $37, $0F, $2C, $1C 	; BG Pal 2
	.byte $3B, $0F, $30, $3C, $3B, $0F, $36, $27, $3B, $0F, $30, $10, $3B, $0F, $28, $18 	; BG Pal 3
	.byte $31, $0F, $30, $3C, $31, $0F, $36, $27, $31, $0F, $30, $10, $31, $0F, $21, $12	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $0F, $0C, $0F, $0F, $0F, $30, $10, $0F, $0F, $27, $17	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $30, $10, $0F, $0F, $27, $17	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $30, $10, $0F, $0F, $27, $17	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $21, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $0C, $30, $31, $FF, $0C, $30, $2A, $FF, $17, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (1)

PalSet_Giant:
	.byte $3B, $0F, $30, $3C, $3B, $0F, $36, $27, $3B, $0F, $2A, $1A, $3B, $0F, $31, $21	; BG Pal 0
	.byte $3B, $0F, $30, $3C, $3B, $0F, $36, $27, $3B, $0F, $2A, $1A, $3B, $0F, $35, $12	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $0F, $30, $10, $0F, $00, $00, $10, $0F, $02, $31, $21	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $27, $16, $0F, $0F, $10, $00	; BG Pal 3
	.byte $30, $0F, $30, $3C, $30, $0F, $36, $27, $30, $0F, $30, $21, $30, $0F, $36, $21	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $06, $36, $27, $0F, $30, $0F, $0F, $0F, $30, $31, $21	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $38, $0F, $21, $2A, $38, $0F, $36, $26, $38	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $36, $27, $17, $0F, $06, $27, $17, $0F, $35, $25, $17	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $0C, $30, $16, $FF, $0C, $30, $2A, $FF, $0C, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_Ice:
	.byte $31, $0F, $30, $3C, $31, $0F, $30, $27, $31, $0F, $30, $2A, $31, $0F, $30, $12	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $06, $0F, $27, $0F, $0F, $0F, $2A, $0F, $0F, $30, $12	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $0F, $25, $24, $0F, $0F, $3A, $24, $0F, $0F, $26, $24	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $38, $0F, $0F, $2A, $38, $0F, $0F, $26, $38 	; BG Pal 3
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $30, $0F, $0F, $2A, $30, $0F, $0F, $12, $30	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $0F, $23, $30, $0F, $0F, $21, $30, $0F, $0F, $13, $30	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $38, $0F, $0F, $2A, $38, $0F, $0F, $26, $38	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $17, $0F, $0F, $27, $17, $0F, $0F, $25, $17	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $30, $FF, $0F, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $06, $30, $16, $FF, $00, $30, $2C, $FF, $17, $30, $27	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_Sky:
	.byte $30, $0F, $30, $3C, $30, $0F, $36, $27, $30, $0F, $2A, $1A, $30, $0F, $12, $21	; BG Pal 0
	.byte $10, $0F, $30, $3C, $10, $0F, $36, $27, $10, $0F, $2A, $1A, $10, $0F, $14, $16	; BG Pal 1
	.byte $3C, $0F, $30, $3C, $3C, $0F, $36, $27, $3C, $0F, $2A, $1A, $3C, $0F, $30, $12	; BG Pal 2
	.byte $30, $0F, $30, $3C, $30, $0F, $36, $27, $30, $0F, $37, $01, $30, $0F, $37, $21	; BG Pal 3
	.byte $30, $0F, $30, $3C, $30, $0F, $36, $27, $30, $0F, $12, $21, $30, $0F, $12, $21	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $0F, $23, $30, $0F, $0F, $21, $30, $0F, $0F, $13, $30	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $38, $0F, $0F, $2A, $38, $0F, $0F, $26, $38	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $0F, $27, $17, $0F, $0F, $27, $17, $0F, $0F, $25, $17	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $2A, $FF, $0F, $36, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $0F, $FF, $0F, $30, $16, $FF, $0F, $30, $12, $FF, $0F, $36, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $1A, $27, $0F, $FF, $30, $36, $0F, $FF, $16, $30, $0F	; SPR Pal 3 (11)

PalSet_2PVs:
	.byte $0F, $0F, $30, $3C, $0F, $17, $36, $27, $0F, $1A, $3B, $2A, $0F, $12, $31, $21	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $17, $36, $27, $0F, $12, $31, $21, $0F, $1A, $3A, $2A	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $0F, $36, $27, $0F, $0F, $2A, $1C, $0F, $0F, $21, $1C	; BG Pal 2
	.byte $37, $0F, $30, $3C, $37, $0F, $30, $27, $37, $0F, $3A, $1A, $37, $0F, $36, $27	; BG Pal 3
	.byte $0F, $0F, $30, $3C, $0F, $10, $30, $3C, $0F, $0B, $1B, $3B, $0F, $00, $10, $30	; BG Pal 4
	.byte $3C, $0F, $30, $3C, $3C, $0F, $30, $3B, $3C, $0F, $37, $27, $3C, $12, $31, $21	; BG Pal 5
	.byte $06, $0F, $30, $3C, $06, $17, $36, $26, $06, $0F, $2B, $1A, $06, $0F, $21, $12	; BG Pal 6
	.byte $07, $0F, $30, $3C, $07, $17, $36, $26, $07, $0F, $2B, $1A, $07, $0F, $21, $12	; BG Pal 7

	.byte $FF, $16, $36, $12, $FF, $1A, $36, $0C, $FF, $12, $31, $21, $FF, $16, $30, $27	; SPR Pal 0 (8)
	.byte $FF, $16, $36, $12, $FF, $30, $36, $1A, $FF, $17, $36, $1A, $FF, $16, $30, $27	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $30, $36, $1A, $FF, $17, $36, $27, $FF, $16, $30, $27	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $12, $FF, $1A, $36, $12, $FF, $16, $30, $27, $FF, $12, $31, $21	; SPR Pal 3 (11)

PalSet_Bonus:
	.byte $0F, $0F, $30, $3C, $0F, $16, $30, $36, $0F, $16, $30, $21, $0F, $17, $30, $27 	; BG Pal 0
	.byte $0F, $0F, $30, $3C, $0F, $30, $21, $36, $0F, $36, $1A, $2A, $0F, $36, $17, $27	; BG Pal 1
	.byte $0F, $0F, $30, $3C, $0F, $17, $27, $36, $0F, $2A, $21, $36, $0F, $16, $30, $36	; BG Pal 2
	.byte $0F, $0F, $30, $3C, $0F, $30, $16, $36, $0F, $30, $16, $21, $0F, $30, $17, $27	; BG Pal 3
	.byte $0F, $0F, $30, $3C, $0F, $30, $16, $36, $0F, $30, $16, $21, $0F, $30, $17, $27	; BG Pal 4
	.byte $0F, $0F, $30, $3C, $0F, $30, $16, $36, $0F, $30, $16, $21, $0F, $30, $17, $27	; BG Pal 5
	.byte $0F, $0F, $30, $3C, $0F, $30, $16, $36, $0F, $30, $16, $21, $0F, $30, $17, $27	; BG Pal 6
	.byte $0F, $0F, $30, $3C, $0F, $30, $16, $36, $0F, $30, $16, $21, $0F, $30, $17, $27	; BG Pal 7

	.byte $FF, $16, $36, $0F, $FF, $17, $27, $36, $FF, $2A, $21, $0F, $FF, $0F, $30, $16	; SPR Pal 0 (8)
	.byte $FF, $16, $30, $0F, $FF, $17, $27, $36, $FF, $2A, $21, $0F, $FF, $0F, $30, $16	; SPR Pal 1 (9)
	.byte $FF, $16, $36, $0F, $FF, $17, $27, $36, $FF, $2A, $21, $0F, $FF, $0F, $30, $16	; SPR Pal 2 (10)
	.byte $FF, $16, $36, $0F, $FF, $17, $27, $36, $FF, $2A, $21, $0F, $FF, $0F, $16, $16	; SPR Pal 3 (11)


Palette_By_Tileset:
	; Points to palette data by a given Level_Tileset value
	.word PalSet_Maps	; 0 - Map
	.word PalSet_Plains	; 1 - Plains style
	.word PalSet_Fort	; 2 - Mini fortress style
	.word PalSet_HillsUnder	; 3 - Hills style
	.word PalSet_HighUp	; 4 - High-Up style
	.word PalSet_Plant	; 5 - Plant infestation
	.word PalSet_Water	; 6 - Water world
	.word PalSet_Toad	; 7 - Toad house
	.word PalSet_PipeMaze	; 8 - Vertical pipe maze
	.word PalSet_Desert	; 9 - desert level
	.word PalSet_Airship	; 10 - airship
	.word PalSet_Giant	; 11 - Giant world
	.word PalSet_Ice	; 12 - ice level
	.word PalSet_Sky	; 13 - coin heaven / sky level
	.word PalSet_HillsUnder	; 14 - underground
	.word PalSet_Bonus	; 15 - bonus game intro and N-Spade
	.word PalSet_Bonus	; 16 - spade game sliders
	.word PalSet_Bonus	; 17 - N-spade
	.word PalSet_2PVs	; 18 - 2P Vs

BonusGame_PlayerPal:
	; Player palettes for the bonus game
	.byte $0F, $16, $30, $36, $0F, $16, $30, $21	; Mario
	.byte $0F, $1A, $30, $36, $0F, $1A, $30, $31	; Luigi
	
	.byte $0F, $30, $30, $36, $0F, $30, $30, $17

Map_PlayerPalFix:
	; Selects the correct color for Mario or Luigi on the map,
	; when not wearing a suit which overrides their base color.
	.byte $16, $1A	; Mario / Luigi

InitPal_Per_MapPowerup:
	; Sets INITIAL palette per map power-up
	; this has no effect to later changes of suits.
	;      SM   BG   FR   LF   TN   HA   JU   PW   ST
	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08

InitPals_Per_MapPUp:
	; Palettes as indexed by InitPal_Per_MapPowerup
	; Note that the first byte is never actually used.
	; Also note this should agree with Map_PostJC_PUpPP1/2 in PRG010
	; See also PRG027 InitPals_Per_MapPUp
	.byte $FF, $16, $36, $0F	; 0 Small
	.byte $FF, $16, $36, $0F	; 1 Big
	.byte $FF, $27, $36, $16	; 2 Fire
	.byte $FF, $16, $36, $0F	; 3 Leaf
	.byte $FF, $2A, $36, $0F	; 4 Frog
	.byte $FF, $17, $36, $0F	; 5 Tanooki
	.byte $FF, $30, $36, $0F	; 6 Hammer
	.byte $FF, $30, $36, $0F	; 7 Judgems
	.byte $FF, $16, $36, $0F	; 8 P-Wing

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Setup_PalData
;
; This subroutine loads the Pal_Data array with a set
; of colors based on Level_Tileset and the values in
; PalSel_Tile_Colors and PalSel_Obj_Colors OR base on
; the override value Pal_Force_Set12.  This also
; performs the corrections of red/green for Mario vs.
; Luigi (see Map_PlayerPalFix and BonusGame_PlayerPal)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Setup_PalData:
	LDA Level_Tileset
	ASL A
	TAY		 ; Y = Level_Tileset << 1 (index into Palette_By_Tileset)

	; Point to the palette associated with this tileset!
	LDA Palette_By_Tileset,Y
	STA <Temp_Var1	
	LDA Palette_By_Tileset+1,Y
	STA <Temp_Var2	

	LDY <Pal_Force_Set12	; Palette override
	BEQ PRG027_B86D	 	; If Pal_Force_Set12 = 0, jump to PRG027_B86D

	; If Pal_Force_Set12 <> 0...
	; Point to the palette associated with this override!
	LDA Palette_By_Tileset,Y
	STA <Temp_Var1		
	LDA Palette_By_Tileset+1,Y
	STA <Temp_Var2		

	; Copy 32 bytes of data into Pal_Data
	LDY #31	 ; Y = 31 (32 bytes total, a whole bg/sprite palette set)
PRG027_B85E:
	LDA [Temp_Var1],Y
	STA Pal_Data,Y	
	DEY		 ; Y--
	BPL PRG027_B85E	 ; While Y >= 0, loop

	LDA #$00	 
	STA <Pal_Force_Set12 ; Pal_Force_Set12 = 0
	JMP PRG027_B8F9	 ; Jump to PRG027_B8F9 (RTS)

PRG027_B86D:
	LDA PalSel_Tile_Colors	 ; A = PalSel_Tile_Colors
	ASL A		 
	ASL A		 
	ASL A		 
	ASL A		 
	TAY			; Y = PalSel_Tile_Colors << 4; basically, offset by an entire 16 bytes (entire bg palette size) based on PalSel_Tile_Colors
	LDX #$00	 	; X = 0

	; Loop to copy the 16 BG colors to Pal_Data
PRG027_B877:
	LDA [Temp_Var1],Y	; Get byte of palette data
	STA Pal_Data,X	 	; Store it into Pal_Data
	INY		 	; Y++
	INX		 	; X++
	CPX #16			
	BNE PRG027_B877	 	; While X <> 16, loop!

	LDA PalSel_Obj_Colors
	ASL A		 
	ASL A		 
	ASL A		 
	ASL A		 
	TAY			; Y = PalSel_Obj_Colors << 4; basically, offset by an entire 16 bytes (entire sprite palette size) based on PalSel_Tile_Colors

	; Loop to copy the 16 sprite colors to Pal_Data
PRG027_B88A:
	LDA [Temp_Var1],Y	; Get byte of palette data
	STA Pal_Data,X	 	; Store it into Pal_Data
	INY		 	; Y++
	INX		 	; X++
	CPX #32		 
	BNE PRG027_B88A	 	; While X <> 32, loop!

	; Technically all transparent colors are duplicates, but this basically
	; ensures that they're all equivalent in the palette RAM copy...
	LDA Pal_Data
	STA Pal_Data+16
	STA Pal_Data+20
	STA Pal_Data+24
	STA Pal_Data+28

	LDA Level_Tileset
	CMP #15	 
	BNE PRG027_B8C3	 	; If Level_Tileset <> 15 (Bonus Game intro), jump to PRG027_B8C3

	; Level_Tileset = 15... (the intro to the bonus games)
	LDA Player_Current
	ASL A		 
	ASL A		 
	ASL A		 
	TAY		 ; Y = Player_Current << 3

	; This loop copies in the correct palette for the Player
	; meeting with the bonus game host (Toad ... typically)
	LDX #$00	 ; X = 0
PRG027_B8B4:
	LDA BonusGame_PlayerPal,Y
	STA Pal_Data+4,X	 
	INY		 ; Y++
	INX		 ; X++
	CPX #$08
	BNE PRG027_B8B4	 ; While X <> 8, loop!
	JMP PRG027_B8F9	 ; (RTS)

PRG027_B8C3:
	CMP #$0f	 	; 
	BGE PRG027_B8F9	 	; For all Level_TileSet values greater than $0F, don't do this next patch!


	; The following patches in the correct palette for the
	; power-up the Player current has active.  Note this is
	; ONLY for the INITIAL LOADING of the map screen.
	LDX Player_Current	; X = Player_Current
	LDY #$08	 	; Y = 8
	LDA World_Map_Power,X	; A = World_Map_Power of this player

PRG027_B8CF:
	CMP InitPal_Per_MapPowerup,Y	; Does this index match the player's current power-up?
	BEQ PRG027_B8D9	 	; If so, jump to PRG027_B8D9
	DEY		 	; Y--
	BPL PRG027_B8CF	 	; While Y >= 0, loop!

	BMI PRG027_B8F9	 ; If no match, jump to PRG027_B8F9 (RTS)

PRG027_B8D9:
	TYA		 
	ASL A		 
	ASL A		 
	TAY		 	; Y <<= 2

	; Store the correct power-up suit colors over the Player colors
	LDA InitPals_Per_MapPUp+3,Y
	STA Pal_Data+19
	LDA InitPals_Per_MapPUp+2,Y
	STA Pal_Data+18
	LDA InitPals_Per_MapPUp+1,Y
	STA Pal_Data+17 

	; Mario vs Luigi palette fix: $16 is the first byte in Small,
	; Big, and Starman.  
	CMP #$16	 
	BNE PRG027_B8F9	 ; If palette byte is not $16, jump to PRG027_B8F9 (RTS)

	LDA Map_PlayerPalFix,X	; Get correct color for Player
	STA Pal_Data+17	 	; Store it!

PRG027_B8F9:
	RTS		 ; Return


Palette_PrepareFadeInTK:
	CLC			; signals to use "fade in" prep code 

Palette_PrepareFadeOutTK_Entry:
	; Set the palette address to the beginning of palettes, $3F00
	LDA #$3f	 
	STA Palette_AddrHi
	LDA #$00	 
	STA Palette_AddrLo

	STA Palette_Term	 ; Palette_Term = 0, Terminate the palette data

	LDA #32
	STA Palette_BufCnt	 ; Loading 32 colors

	; Prepare all 31 colors in their darkest shades!
	LDY #31		 ; Y = 31
PRG027_B90F:
	PHP		 ; Save CPU state

	LDA Pal_Data,Y	 ; Get next byte of target palette data

	BCS PRG027_B91C	 ; If carry is set (fade out), jump to PRG027_B91C (fade out needs the colors as they're to be targeted!)

	SUB #$30	 ; Otherwise, A -= $30 (darkest shade of this color)
	BCS PRG027_B91C	 ; If we didn't go "less than black", jump to PRG027_B91C
	LDA #$0f	 ; Otherwise, A = $F (black)

PRG027_B91C:
	PLP		 ; Restore CPU state

	STA Palette_Buffer,Y	; Copy this byte of palette data to the buffer
	DEY		 	; Y--
	BPL PRG027_B90F	 	; While Y >= 0, loop!

	LDA #$0b
	STA Fade_Level	 ; Fade_Level = $B

	LDA #$04
	STA Fade_Tick	 ; Fade_Tick = 4

	LDA #$06	 
	STA <Graphics_Queue	 ; Reset the graphics buffer
	RTS		 ; Return


	; Similar to Palette_DoFadeIn from PRG026, but has some additional functionality
Palette_DoFadeInTK:
	LDA Fade_Tick	 
	BEQ PRG027_B93A	 ; If Fade_Tick = 0, jump to PRG027_B93A
	DEC Fade_Tick	 ; Otherwise, Fade_Tick--

PRG027_B93A:
	LDA Fade_Level	 
	BEQ PRG027_B982	 ; If Fade_Level = 0, jump to PRG027_B982 (RTS)

	LDA Fade_Tick	 
	BNE PRG027_B982	 ; If Fade_Tick <> 0, jump to PRG027_B982 (RTS)

	LDA #$04	
	STA Fade_Tick	 ; Fade_Tick = 4 (reload) 

	DEC Fade_Level	 ; Fade_Level--

	BNE PRG027_B95F	 ; If Fade_Level <> 0, jump to PRG027_B95F

	LDA World_Num
	CMP #$06
	BNE PRG027_B95F	 ; If World_Num <> 6 (World 7), jump to PRG027_B95F

	; Play the "Dun dun dun dun!"
	LDA #MUS2B_WORLD8LETTER
	STA Sound_QMusic2

	; CineKing_Timer2 = $78
	LDA #$78
	STA CineKing_Timer2

PRG027_B95F:
	LDY #31		 ; Y = 31
PRG027_ABF8:
	LDA Palette_Buffer,Y	; Get next byte of palette data 
	CMP #$0f	 	; Is this color black?
	BNE PRG027_B970	 	; If not, jump to PRG027_B970

	LDA Pal_Data,Y	 ; Get the target byte
	AND #$0f	 ; Gets the darkest shade of this color
	JMP PRG027_B978	 ; Jump to PRG027_B978

PRG027_B970:
	CMP Pal_Data,Y	 ; Compare this against the target palette byte
	BEQ PRG027_B97B	 ; If we reached the target, jump to PRG027_B97B
	ADD #$10	 ; Otherwise, add $10 (brighter)

PRG027_B978:
	STA Palette_Buffer,Y	 ; Update the buffer!

PRG027_B97B:
	DEY		 ; Y--
	BPL PRG027_ABF8	 ; While Y >= 0, loop!

	LDA #$06	 
	STA <Graphics_Queue	 ; Queue graphics routine 6

PRG027_B982:
	RTS		 ; Return


	; Functionally identical copy of Palette_PrepareFadeOut from PRG026
Palette_PrepareFadeOutTK:
	LDA FadeOut_Cancel
	BNE PRG027_B98C	 	; If FadeOut_Cancel <> 0, jump to PRG027_B98C (RTS)

	SEC			; signals to use "fade out" prep code		 
	JMP Palette_PrepareFadeOutTK_Entry

PRG027_B98C:
	RTS		 ; Return

	; ALMOST identical copy of Palette_DoFadeOut from PRG026
Palette_DoFadeOutTK:
	LDA FadeOut_Cancel
	BNE PRG027_B9C3	 ; If FadeOut_Cancel <> 0, jump to PRG027_B9C3

	LDA Fade_Tick
	BEQ PRG027_B99A	 ; If Fade_Tick = 0, jump to PRG027_B99A

	DEC Fade_Tick	 ; Fade_Tick--

PRG027_B99A:
	LDA Fade_Level
	BEQ PRG027_B9C3	 ; If Fade_Level = 0, jump to PRG027_B9C3

	LDA Fade_Tick
	BNE PRG027_AC5F	 ; If Fade_Tick <> 0, jump to PRG027_AC5F

	LDA #$04
	STA Fade_Tick	 ; Fade_Tick = 4

	DEC Fade_Level	 ; Fade_Level--

	; For all palette colors...
	LDY #31
PRG027_B9AE:
	LDA Palette_Buffer,Y	; Get this color
	SUB #16		 	; Subtract 16 from it
	BPL PRG027_B9B8	 	; If we didn't go below zero, jump to PRG027_B9B8

	LDA #$0f	 	; Otherwise, set it to safe minimum

PRG027_B9B8:
	STA Palette_Buffer,Y	; Update palette color
	DEY		 	; Y--
	BPL PRG027_B9AE	 	; While Y >= 0, loop!

	; Update palette
	LDA #$06
	STA <Graphics_Queue

PRG027_AC5F:
	RTS		 ; Return

PRG027_B9C3:
	; Fade out cancellation request

	LDA #$00
	STA FadeOut_Cancel
	RTS		 ; Return



; Rest of ROM bank was empty...

